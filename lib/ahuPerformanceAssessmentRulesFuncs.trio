/*
  Copyright 2016 Matthew Walker, Direct Control
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  
  History:
    2016-02-18   Matthew Walker   Creation
    2016-04-22   Matthew Walker   Added GPLv3 license
*/
--------------------------------------------------------------------------
name:aparRule01
func
dis: APAR Rule 01: Heating mode, but supply air temperature is less than the mixed air temperature
help:
  The AHU is in heating mode, but the supply air temperature is less than the mixed air temperature.  The heat added to the air by the supply fan is considered, as is a component for temperature-measurement error.  This spark could be due to:
  - Supply air temperature sensor error
  - Mixed air temperature sensor error
  - Leaking cooling coil valve
  - Stuck cooling coil valve
  - Stuck heating coil valve
  - Undersized heating coil
  - Hot water temperature supply is too low
  - Hot water circulating pump fault
ruleOn: ahu
doc:
  Tests for supply air being below mixed air temperature
src:
  (rec, date) => do
    throw "this is an exception"
    "this is a return value that is not an exception"
  end
--------------------------------------------------------------------------

--------------------------------------------------------------------------
name:aparRule22
func
dis: APAR Rule 22: Simultaneous Cooling and Heating
help: Unit is simultaneously cooling and heating.  Check control system.
ruleOn: ahu
doc:
  Tests for simultaneous cooling and heating.  Multiple cool points
  are joined together.  Multiple heat points are treated similarly.
  The intersection of these joined points is then considerd.
src:
  (rec, date) => do
    // Get id of equipment
    equipRef: rec->id

    // Get cool points
    coolRecs: readAll(cool and equipRef==equipRef and his and tz and kind)
    
    // Get cool histories
    windows: []
    coolRecs.each() (row) => do
      coolHis: hisRead(row, date)
      coolWindows: coolHis.hisFindPeriods() (val) => try val>0 catch val // handles Bool and Number
      windows = windows.add(coolWindows)
    end
    combinedCoolWindows: hisPeriodUnion(windows)

    // Get heat points
    heatRecs: readAll(heat and equipRef==equipRef and his and tz and kind)

    // Get heat histories
    windows = []
    heatRecs.each() (row) => do
      heatHis: hisRead(row, date)
      heatWindows: heatHis.hisFindPeriods() (val) => try val>0 catch val // handles Bool and Number
      windows = windows.add(heatWindows)
    end
    combinedHeatWindows: hisPeriodUnion(windows)
    
    // Calculate the intersection of the combined cool and heat points
    hisPeriodIntersection([combinedCoolWindows, combinedHeatWindows])
  end
--------------------------------------------------------------------------


